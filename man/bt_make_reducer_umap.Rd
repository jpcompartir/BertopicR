% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reduce.R
\name{bt_make_reducer_umap}
\alias{bt_make_reducer_umap}
\title{Create umap dimensionality reduction model}
\usage{
bt_make_reducer_umap(
  ...,
  n_neighbours = 15L,
  n_components = 5L,
  min_dist = 0,
  metric = "euclidean",
  random_state = 42L,
  low_memory = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{...}{Sent to umap.UMAP python function for adding additional arguments}

\item{n_neighbours}{The size of local neighbourhood (in terms of number of neighboring data points) used
for manifold approximation (default: 15).}

\item{n_components}{The number of dimensions to reduce to (default: 5).}

\item{min_dist}{The minimum distance between points in the low-dimensional representation (default: 0.0).}

\item{metric}{The metric to use for distance computation (default: "euclidean").}

\item{random_state}{The seed used by the random number generator (default: 42).}

\item{low_memory}{Logical, use a low memory version of UMAP (default: FALSE)}

\item{verbose}{Logical flag indicating whether to report progress during the dimension reduction (default: TRUE).}
}
\value{
A UMAP Model that can be input to bt_do_reducing to reduce dimensions of data
}
\description{
This function wraps the UMAP functionality from Python's umap-learn package for use in R via reticulate. It allows you to perform dimension reduction on high-dimensional data, its intended use is in a BertopicR pipeline/
}
\details{
If you're concerned about processing time, you most likely will only want to reduce the dimensions of your dataset once. In this case, when compiling your model with bt_compile_model you should call \code{reducer <- bt_empty_reducer()}.

low_memory = TRUE is currently inadvisable as trial and error suggests the results are not as robust in later clustering.
}
\examples{
# using euclidean distance measure and specifying numeric inputs as integers
reducer <- bt_make_reducer_umap(n_neighbours = 15L, n_components = 10L, metric = "euclidean")

# using euclidean distance measure and not specifying numeric inputs as integers (done internally in function)
reducer <- bt_make_reducer_umap(n_neighbours = 15, n_components = 10, metric = "euclidean")

 # using cosine distance measure and not specifying numeric inputs as integers (done internally in function)
reducer <- bt_make_reducer_umap(n_neighbours = 20, n_components = 6, metric = "cosine")

}
\seealso{
\url{https://umap-learn.readthedocs.io/en/latest/api.html}
\url{https://umap-learn.readthedocs.io/en/latest/basic_usage.html}
\url{https://umap-learn.readthedocs.io/en/latest/parameters.html}
}
